dnl Initialize the autoconf settings

AC_INIT(esd.h)

ESD_MAJOR_VERSION=0
ESD_MINOR_VERSION=2
ESD_MICRO_VERSION=5
ESD_VERSION=$ESD_MAJOR_VERSION.$ESD_MINOR_VERSION.$ESD_MICRO_VERSION
AC_SUBST(ESD_MAJOR_VERSION)
AC_SUBST(ESD_MINOR_VERSION)
AC_SUBST(ESD_MICRO_VERSION)
AC_SUBST(ESD_VERSION)

VERSION=$ESD_VERSION
PACKAGE=esound

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

dnl Check for tools

AC_CANONICAL_HOST
AC_PROG_MAKE_SET
AC_PROG_CC
AC_PROG_CPP

AM_PROG_LIBTOOL
AC_PROG_INSTALL

dnl Check for system libs needed

AC_CHECK_FUNC(connect,,[AC_CHECK_LIB(socket,connect)])
AC_CHECK_FUNC(gethostbyname,,[AC_CHECK_LIB(nsl,gethostbyname)])
AC_CHECK_FUNC(nanosleep,,[AC_CHECK_LIB(posix4,nanosleep)])
AC_CHECK_FUNC(inet_aton,,[AC_CHECK_LIB(resolv,inet_aton)])
if test x$ac_cv_func_inet_aton = xno && test x$ac_cv_lib_resolv_inet_aton = xno 
then :
else
  AC_DEFINE(HAVE_INET_ATON)
fi

AC_CHECK_FUNC(getopt_long,,[LIBOBJS="$LIBOBJS getopt.o getopt1.o"])
AC_SUBST(LIBOBJS)

dnl Needed for FIONBIO on Solaris at least
AC_CHECK_HEADERS(sys/filio.h sys/ioctl.h)

dnl Check for audio header files needed

echo "---------------------------------------------------------------------"
echo "--- Checking to see which audio header files your system uses.";
echo "--- Most of these checks should fail. Do not be alarmed.";
AC_CHECK_HEADERS(soundcard.h sys/soundcard.h machine/soundcard.h sys/audio.h)
AC_CHECK_HEADERS(sys/audioio.h sys/audio.io.h sun/audioio.h)
AC_CHECK_HEADERS(dmedia/audio.h sys/soundlib.h sys/asoundlib.h)

dnl Define the driver needed based on the first header file found

AC_ARG_ENABLE(local_sound,[  --enable-local-sound    turn on local sound playing [default=yes]], , enable_local_sound=yes)

if test "x$enable_local_sound" = "xyes"; then
   found_sound=no

   if test "${ac_cv_header_sys_soundcard_h}" = "yes" || \
      test "${ac_cv_header_soundcard_h}" = "yes" || \
      test "${ac_cv_header_machine_soundcard_h}" = "yes"; then

      dnl Platform mklinux/powerpc needs special care and feeding
      if test "${host_cpu}" = "powerpc"; then
        found_sound=yes
        AC_DEFINE(DRIVER_MKLINUX)
      else
        found_sound=yes
        AC_DEFINE(DRIVER_OSS)
      fi
   fi

   if test "${ac_cv_header_sys_audio_h}" = "yes"; then
      case ${host_os} in
      hpux*)
          found_sound=yes
          AC_DEFINE(DRIVER_HPUX)
      ;;
      aix*)
          found_sound=yes
          AC_DEFINE(DRIVER_AIX)
      esac
   fi

   if test "${ac_cv_header_sys_audioio_h}" = "yes" || \
      test "${ac_cv_header_sys_audio_io_h}" = "yes" || \
      test "${ac_cv_header_sun_audioio_h}" = "yes"; then
      case ${host_os} in
      solaris*)
         found_sound=yes
         AC_DEFINE(DRIVER_SOLARIS)
      esac
   fi

   if test "${ac_cv_header_dmedia_audio_h}" = "yes"; then
      case ${host_os} in
      irix*)
         found_sound=yes
         AC_DEFINE(DRIVER_IRIX)
      esac
   fi

   if test "${ac_cv_header_sys_soundlib_h}" = "yes"; then
      found_sound=yes
      AC_DEFINE(DRIVER_ALSA)
   fi

   if test "${ac_cv_header_sys_asoundlib_h}" = "yes"; then
      found_sound=yes
      AC_DEFINE(DRIVER_NEWALSA)
   fi

   if test "$found_sound" = "no"; then
      AC_MSG_ERROR([Could not find a support sound driver])
   fi
else
   AC_DEFINE(DRIVER_NONE)
fi

dnl Check for audio libs needed

echo "---------------------------------------------------------------------"
echo "--- Checking to see which audio libraries are required for linking.";
echo "--- Most of these checks should also fail. Do not be alarmed.";
AC_CHECK_FUNC(_oss_ioctl,,[AC_CHECK_LIB(ossaudio,_oss_ioctl)])
AC_CHECK_FUNC(ALnewconfig,,[AC_CHECK_LIB(audio,ALnewconfig)])
AC_CHECK_FUNC(snd_cards,,[AC_CHECK_LIB(sound,snd_cards)])
AC_CHECK_FUNC(snd_cards,,[AC_CHECK_LIB(asound,snd_cards)])

dnl Only build the esdplay utility if we find the library, -lauduiofile
AF_LIB=
ESDPLAY=

AC_ARG_ENABLE(esdplay,
[  --enable-esdplay        build esdplay utility (requires audiofile library)
                              ARG = { yes | no | check } [default=check]])

if test xno != x$enable_esdplay ; then
echo "---------------------------------------------------------------------"
echo "--- The esdplay utility requires the audiofile library."
AC_CHECK_LIB(audiofile,afOpenFile,[
   echo "--- The esdplay utility will be built."
   AF_LIB="-laudiofile"
   ESDPLAY=esdplay
],[
   echo "--- WARNING: The audiofile library was not found on your system."
   echo "--- The audiofile library may be obtained from your favourite"
   echo "--- gnome distribution center, or check the audiofile web page at:"
   echo "--- http://www.68k.org/~michael/audiofile/"
   echo "--- The esdplay utility will not be built."
],-lm)
else
   echo "---------------------------------------------------------------------"
   echo "--- Per configuration request, the esdplay utility will not be built."
fi

echo "---------------------------------------------------------------------"

dnl set | sort

ESD_LIBS=$LIBS
AC_SUBST(ESD_LIBS)

AC_SUBST(AF_LIB)
AC_SUBST(ESDPLAY)

AC_OUTPUT([
Makefile
esd-config
], [case "$CONFIG_FILES" in *esd-config*) chmod +x esd-config;; esac])
